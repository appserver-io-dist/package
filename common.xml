<?xml version="1.0"?>
<!DOCTYPE project>
<project name="appserver-io-dist/package" basedir="." default="build">

    <!-- Readin enviroment properties to env property -->
    <property environment="env" />

    <!-- Generate a timestamp to time.stamp property -->
    <tstamp>
        <format property="time.stamp" pattern="yyyy.MM.dd.HHmmss"/>
    </tstamp>

    <!-- Set directory properties -->
    <property name="src.dir" value="${basedir}/src" />
    <property name="target.dir" value="${basedir}/target" />
    <property name="build.dir" value="${basedir}/build" />
    <property name="tests.dir" value="${basedir}/tests" />
    <property name="temp.dir" value="${basedir}/tmp" />
    <property name="reports.dir" value="${basedir}/reports" />

    <!-- ==================================================================== -->
    <!-- Import the tests/*.xml files                                         -->
    <!-- ==================================================================== -->
    <import file="tests/test.xml"/>

    <!-- ==================================================================== -->
    <!-- Installs composer in target directory                                -->
    <!-- ==================================================================== -->
    <target name="install-composer">
        <get src="https://getcomposer.org/installer" dest="${temp.dir}/composer-installer" />
        <exec dir="${temp.dir}" executable="php">
            <arg value="composer-installer" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will test if the targeted box is already up and running.             -->
    <!-- Will set the properties "vagrant-box.running" or                     -->
    <!-- "vagrant-box.not-running" depending on the result                    -->
    <!-- ==================================================================== -->
    <target name="test-vagrant-box-running">
        <!-- issue the actual command -->
        <exec dir="${temp.dir}" executable="vagrant" outputproperty="vagrant-box.status">
            <arg value="status" />
        </exec>
        <parse-vagrant-box-status status="${vagrant-box.status}" boxname="${vagrant-box.name}" />
        <condition property="vagrant-box.not-running">
            <isset property="BOX_NOT_RUNNING"/>
        </condition>
        <condition property="vagrant-box.running">
            <isset property="BOX_RUNNING"/>
        </condition>
    </target>

    <!-- ==================================================================== -->
    <!-- Will parse a vagrant box status to look for the "running" state.     -->
    <!-- Will set BOX_RUNNING if found, BOX_NOT_RUNNING if otherwise          -->
    <!-- ==================================================================== -->
    <scriptdef name="parse-vagrant-box-status" language="javascript">
        <attribute name="status"/>
        <attribute name="boxname"/>
        <![CDATA[
            // getting the params
            var status = attributes.get("status");
            var boxName = attributes.get("boxname");
            // check the occurence of a certain run indicator
            if (status.indexOf(boxName + " running") > -1) {
                project.setProperty("BOX_RUNNING", true);
            } else {
                project.setProperty("BOX_NOT_RUNNING", true);
            }
        ]]>
    </scriptdef>

    <!-- ==================================================================== -->
    <!-- Will start a vagrant box within the tmp directory                    -->
    <!-- ==================================================================== -->
    <target name="start-vagrant-box" depends="test-vagrant-box-running" if="vagrant-box.not-running">
        <!-- tell the user we need the box name first -->
        <fail unless="vagrant-box.name" message="Please specify the type of box to start e.g. using 'ant start-vagrant-build-box'" />
        <!-- issue the actual start command -->
        <exec dir="${temp.dir}" executable="vagrant" errorproperty="vagrant-box.start.failed">
            <arg line="up ${vagrant-box.name} --provider=${vagrant.provider} --destroy-on-error" />
        </exec>
        <!-- eliminate the possiblity of empty but existing error output -->
        <property name="vagrant-box.start.failed" value=""/>
        <condition property="fatal-error.occured" value="${vagrant-box.start.failed}">
            <not>
                <equals arg1="${vagrant-box.start.failed}" arg2=""/>
            </not>
        </condition>
        <!-- check for a specific build failure and make an emergency destroy -->
        <antcall target="destroy-vagrant-box-on-error" />
        <!-- tell them about any failures we might encountered -->
        <fail if="fatal-error.occured" message="Starting the vagrant box failed! Error message was: '${fatal-error.occured}', also see log above." />
    </target>

    <!-- ==================================================================== -->
    <!-- Will start a vagrant box specifically suited for build tasks         -->
    <!-- ==================================================================== -->
    <target name="start-vagrant-build-box">
        <!-- map the vagrant name according to our prepared environment -->
        <property name="vagrant-box.name" value="${vagrant-box.prefix}Build" />
        <!-- prepare the building environment -->
        <antcall target="prepare-build-environment" />
        <!-- start our vagrant box -->
        <antcall target="start-vagrant-box" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will destroy any running vagrant box within our tmp directory        -->
    <!-- ==================================================================== -->
    <target name="destroy-vagrant-box">
        <!-- issue the actual destroy command -->
        <exec dir="${temp.dir}" executable="vagrant" failonerror="true">
            <arg line="destroy -f" />
        </exec>
    </target>

    <!-- ==================================================================== -->
    <!-- Will destroy any running vagrant box within our tmp directory if     -->
    <!-- there has been an error before                                       -->
    <!-- ==================================================================== -->
    <target name="destroy-vagrant-box-on-error" if="fatal-error.occured" unless="${vagrant-box.error-resistant}">
        <!-- forward to the destroy command -->
        <antcall target="destroy-vagrant-box" />
    </target>

    <!-- ==================================================================== -->
    <!-- Will split a string at the "-" character                             -->
    <!-- ==================================================================== -->
    <scriptdef name="filter-version" language="javascript">
        <attribute name="param"/>
        <![CDATA[
       // getting the param
        var param = attributes.get("param");

        // preset the return values
        var resultVersion = param;
        var resultBuildNumber = '';

        // split if necessary
        if (param.indexOf("-") !== -1) {

           resultVersion = param.substring(0, param.indexOf("-"));
           resultBuildNumber = param.replace(resultVersion + "-", ".");
        }

        // store the result in new properties
        project.setProperty("RESULT_VERSION", resultVersion);
        project.setProperty("RESULT_BUILD-NUMBER", resultBuildNumber);
    ]]>
    </scriptdef>

    <!-- ==================================================================== -->
    <!-- Propagates the recent build to the official release sites, updates   -->
    <!-- release lists, etc.. Not to be mistaken for the "publish" target     -->
    <!-- ==================================================================== -->
    <target name="version-release" description="Propagates the recent build to the official release sites, updates release lists, etc..">
        <echo message="Now starting release cycle for the lately built version"/>
    </target>

    <!-- ==================================================================== -->
    <!-- Will prepare the environment to run a vagrant box in                 -->
    <!-- ==================================================================== -->
    <target name="prepare-build-environment" depends="prepare, clean-build, clean-reports">
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir="${basedir}">
               <include name="build.*"/>
               <include name="tests/*"/>
            </fileset>
        </copy>
        <!-- expand the properties within our box configuration -->
        <copy todir="${temp.dir}" failonerror="true">
            <fileset dir=".">
                <include name="Vagrantfile"/>
            </fileset>
            <filterchain>
                <expandproperties/>
            </filterchain>
        </copy>
        <!-- prepare a tmp dir for work within the VM -->
        <mkdir dir="${temp.dir}/tmp" />
    </target>

    <!-- ==================================================================== -->
    <!-- Creates all RPM packages within a temporarily started vagrant box.   -->
    <!-- Box will be started and destroyed automatically                      -->
    <!-- ==================================================================== -->
    <target name="build">
        <!-- start our vagrant box -->
        <antcall target="start-vagrant-build-box" />
        <!-- start the build in the box -->
        <antcall target="vagrant-build" />
        <!-- destroy the box after all work is done -->
        <antcall target="destroy-vagrant-box" />   
    </target>

    <!-- ==================================================================== -->
    <!-- Runs all available tests from all included test files                -->
    <!-- ==================================================================== -->
    <target name="local-run-tests" depends="prepare">
        <!-- run the integration tests -->
        <antcall target="local-run-system-tests" />
        <!-- run performance tests -->
        <antcall target="local-run-performance-tests" />
    </target>

    <!-- ==================================================================== -->
    <!-- Runs all available tests from all included test files within a       -->
    <!-- vagrant machine                                                      -->
    <!-- ==================================================================== -->
    <target name="vagrant-run-tests">
        <!-- run the system tests within the assumed box -->
        <antcall target="vagrant-run-system-tests" />
        <!-- run the performance tests within the assumed box -->
        <antcall target="vagrant-run-performance-tests" />
    </target>

    <!-- ==================================================================== -->
    <!-- Runs all available tests from all included test files within a       -->
    <!-- vagrant machine                                                      -->
    <!-- ==================================================================== -->
    <target name="run-tests">
        <!-- start our vagrant box -->
        <antcall target="start-vagrant-test-box" />
        <!-- do the actual testing -->
        <antcall target="vagrant-run-tests" />
        <!-- destroy the box after all work is done -->
        <antcall target="destroy-vagrant-box" />
    </target>

</project>
